/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package main;

import com.google.common.reflect.ClassPath;
import lombok.extern.slf4j.Slf4j;

import java.io.*;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.*;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.stream.Collectors;

@Slf4j
public class App {
    private static final String CODE_PROPERTIES = "CODE_PROP_FILE" ;
    private static final String CODE_JARS_PROPERTY = "codeFolder" ;
    private static final int THREAD_POOL_SIZE = 10;

    private final static ClassLoader MAIN_CL = App.class.getClassLoader();
    private final static ExecutorService executor = Executors.newFixedThreadPool(THREAD_POOL_SIZE);

    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) throws IOException, MalformedURLException, InterruptedException, ClassNotFoundException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
        String codeJarsLocation = getJarsPath();

        File[] foundJarFiles = getJars(codeJarsLocation);

        Set<String> foundClasses;
        for (File foundJarFile : foundJarFiles) {
            JarFile jarFile = new JarFile(foundJarFile);
            foundClasses = jarFile.stream()
                    .map(JarEntry::getRealName)
                    .filter(className -> className.endsWith(".class"))
                    .map(className -> className.replace("/","."))
                    .map(className -> className.substring(0,className.length()-6))
                    .collect(Collectors.toSet());
            ClassLoader cl = new URLClassLoader(new URL[]{foundJarFile.toURI().toURL()}, MAIN_CL);
            for (String foundClass : foundClasses) {
                Class<?> aClass = cl.loadClass(foundClass);
                if (Runnable.class.isAssignableFrom(aClass)) {
                    Constructor<?> constructor = aClass.getConstructor();
                    Runnable task = (Runnable) constructor.newInstance();
                    executor.submit(task);
                }
            }
        }

    }


    private static File[] getJars(String codeJarsLocation) {
        return Paths.get(codeJarsLocation).toFile().listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.endsWith(".jar");
            }
        });
    }

    private static String getJarsPath() throws IOException {
        String propertiesFileLocation =
                System.getProperty(CODE_PROPERTIES, "code.properties");
        Properties properties = new Properties();
        InputStream propertiesAsInputStream = App.class.getClassLoader().getResourceAsStream(propertiesFileLocation);
        properties.load(propertiesAsInputStream);

        return properties.getProperty(CODE_JARS_PROPERTY);
    }


    private static Optional<URL> fileToUrl(File file) {
        Optional<URL> ret = Optional.empty();
        try {
            ret = Optional.of(file.toURI().toURL());
        } catch (MalformedURLException e) {
            LOGGER.error("Error converting file: ",file.getName(),e);
        }
        return ret;
    }
}
