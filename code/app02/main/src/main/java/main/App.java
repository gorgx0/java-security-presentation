/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package main;

import com.google.common.collect.ImmutableSet;
import com.google.common.reflect.ClassPath;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.*;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static java.nio.file.StandardWatchEventKinds.*;

@Slf4j
public class App {
    private static final String CODE_PROPERTIES = "CODE_PROP_FILE" ;
    private static final String CODE_JARS_PROPERTY = "codeFolder" ;
    private static final int THREAD_POOL_SIZE = 10;

    private final static ClassLoader MAIN_CL = App.class.getClassLoader();
    private final static ExecutorService executor = Executors.newFixedThreadPool(THREAD_POOL_SIZE);

    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) throws IOException, MalformedURLException, InterruptedException, ClassNotFoundException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
        String codeJarsLocation = getJarsPath();

        List<URL> foundJarFiles = getJars(codeJarsLocation);

        for (URL foundJarFile : foundJarFiles) {
            processJar(foundJarFile);
        }
    }

    private static void processJar(URL foundJarFile) throws ClassNotFoundException, IOException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
        ClassLoader cl = new URLClassLoader(new URL[]{foundJarFile}, MAIN_CL);
        ImmutableSet<ClassPath.ClassInfo> classes = ClassPath.from(cl).getAllClasses();

        for (ClassPath.ClassInfo classInfo : classes) {
            Class<?> aClass = classInfo.load();
            if(aClass.isAssignableFrom(Runnable.class)) {
                Constructor<?> constructor = aClass.getConstructor(null);
                Object instance = constructor.newInstance();
                executor.submit((Runnable) instance);
            }
        }

    }

    private static List<URL> getJars(String codeJarsLocation) {
        return Arrays.stream(Paths.get(codeJarsLocation).toFile().listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.endsWith(".jar");
            }
        })).map(App::fileToUrl).filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());
    }

    private static String getJarsPath() throws IOException {
        String propertiesFileLocation =
                System.getProperty(CODE_PROPERTIES, "code.properties");
        Properties properties = new Properties();
        InputStream propertiesAsInputStream = App.class.getClassLoader().getResourceAsStream(propertiesFileLocation);
        properties.load(propertiesAsInputStream);

        return properties.getProperty(CODE_JARS_PROPERTY);
    }


    private static Optional<URL> fileToUrl(File file) {
        Optional<URL> ret = Optional.empty();
        try {
            ret = Optional.of(file.toURI().toURL());
        } catch (MalformedURLException e) {
            LOGGER.error("Error converting file: ",file.getName(),e);
        }
        return ret;
    }
}
